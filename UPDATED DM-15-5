(function() {
  // First define the loadLiveLog function before using it
  const loadLiveLog = () => {
    return new Promise((resolve) => {
      if (window.createLiveLog && window.updateLiveLog) {
        resolve();
        return;
      }
  
      const script = document.createElement('script');
      script.src = chrome.runtime.getURL('livelog.js');
      script.onload = resolve;
      (document.head || document.documentElement).appendChild(script);
    });
  };
  
  // Add the new CSS styles
  const addStyles = () => {
    const style = document.createElement('style');
    style.textContent = `
      .comment-btn {
        position: relative;
        overflow: hidden;
        background: #ffffff;
        color: rgb(0, 51, 204);
        border: 1px solid rgb(0, 51, 204);
        padding: 5px 10px;
        border-radius: 50px;
        font-size: 14px;
        font-weight: normal;
        cursor: pointer;
        white-space: nowrap;
        flex-shrink: 0;
        min-width: unset;
        text-align: center;
        transition: all 0.4s ease;
      }
      #profile-sticky-header-toggle {
        padding-top:1px;
      }
      .comment-btn:hover {
        background: rgb(0, 51, 204);
        color: #ffffff;
      }
  
      .comment-btn:active {
        transform: scale(0.98);
      }
  
      .comment-btn::after {
        display: none;
      }
  
      .comment-btn.active::after {
        display: none;
      }
  
      .comment-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
        background: #24268d;
        border: 1px solid #24268d;
        color: #ffffff;
      }
  
      .dynamic-comment-buttons {
        border: 1px solid #24268d;
        border-radius: 12px;
        padding: 10px;
        margin: 16px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        box-shadow: 0 0 8px rgba(100, 149, 237, 0.2);
        overflow-x: auto;
        background: #ffffff;
        justify-content: flex-start;
      }
  
      .dynamic-comment-buttons, .comment-btn {
        box-sizing: border-box;
      }
  
      .ai-loading-message {
        animation: pulse 1.5s infinite;
        font-size: 14px;
        margin: 10px 0;
      }
      @keyframes pulse {
        0% { opacity: 0.6; }
        50% { opacity: 1; }
        100% { opacity: 0.6; }
      }
  
      .ai-loading-container {
        animation: fadeIn 0.3s ease-out;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: #f5f5f5;
        margin-bottom: 10px;
      }
      .ai-loading-message {
        font-size: 14px;
        color: #424242;
      }
      .stop-button:hover {
        background: #ffcdd2 !important;
      }
  
      /* Hide the status popup by default */
      #ai-status-popup {
        display: none !important;
      }
      
      /* Connection status styles */
      .connection-status-message {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 8px;
        font-size: 14px;
        text-align: center;
      }
      .connection-status-pending {
        background-color: #fff3e0;
        color: #e65100;
        border: 1px solid #ffcc80;
      }
      .connection-status-not-connected {
        background-color: #ffebee;
        color: #c62828;
        border: 1px solid #ef9a9a;
      }
      .connection-status-connected {
        background-color: #e8f5e9;
        color: #2e7d32;
        border: 1px solid #a5d6a7;
      }
      .connection-status-accept {
        background-color: #e3f2fd;
        color: #0d47a1;
        border: 1px solid #90caf9;
      }
      
      /* AgentLink button specific styles */
      .agentlink-btn {
        background-color: #24268d !important;
        color: white !important;
        border: none !important;
      }
      .agentlink-btn:hover {
        background-color: #1a1a6d !important;
      }
    `;
    document.head.appendChild(style);
  };
  
  // Create AgentLink Branding Footer
  function createAgentLinkBranding() {
    const powered = document.createElement('div');
    powered.style.width = '100%';
    powered.style.borderTop = '1px solid #e5e7eb';
    powered.style.paddingTop = '8px';
    powered.style.display = 'flex';
    powered.style.alignItems = 'center';
    powered.style.justifyContent = 'center';
    powered.style.gap = '6px';
    powered.style.fontSize = '14px';
    powered.style.color = '#24268d';
    powered.innerHTML = `       
      <span style="display:flex;align-items:center;justify-content:center;width:20px;height:20px;background:linear-gradient(to right,#4d7cfe,#9f7aea);border-radius:5px;">
        <svg xmlns='http://www.w3.org/2000/svg' width='14' height='14' viewBox='0 0 24 24' fill='none'>
          <path d='M12 8V4H8' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/>
          <rect width='16' height='12' x='4' y='8' rx='2' stroke='white' stroke-width='2'/>
          <path d='M2 14h2' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/>
          <path d='M20 14h2' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/>
          <path d='M15 13v2' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/>
          <path d='M9 13v2' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/>
        </svg>
      </span>
      <span style="font-weight:500;">Powered by AgentLink</span>
    `;
    return powered;
  }
  
  // Loading Indicator
  function createLoadingIndicator(buttons, container) {
    const abortController = new AbortController();
    let isCancelled = false;
  
    const loadingContainer = document.createElement('div');
    loadingContainer.className = 'ai-loading-container';
    loadingContainer.style.display = 'flex';
    loadingContainer.style.alignItems = 'center';
    loadingContainer.style.justifyContent = 'space-between';
    loadingContainer.style.width = '100%';
    loadingContainer.style.padding = '10px';
  
    const loadingMessage = document.createElement('div');
    loadingMessage.className = 'ai-loading-message';
    loadingMessage.innerHTML = `
    <span style="display:inline-flex;align-items:center;">
      <svg width="20" height="20" viewBox="0 0 50 50" style="margin-right:8px;">
        <circle cx="25" cy="25" r="20" fill="none" stroke="#7f00ff" stroke-width="5" stroke-linecap="round" stroke-dasharray="31.4 31.4" transform="rotate(-90 25 25)">
          <animateTransform attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="1s" repeatCount="indefinite"/>
        </circle>
      </svg>
      AgentLink is generating your message...
    </span>
  `;       
    const stopButton = document.createElement('button');
    stopButton.className = 'stop-button';
    stopButton.innerHTML = '✕ Stop';
    stopButton.style.marginLeft = '10px';
    stopButton.style.padding = '3px 8px';
    stopButton.style.fontSize = '12px';
    stopButton.style.background = '#ffebee';
    stopButton.style.color = '#c62828';
    stopButton.style.border = '1px solid #ef9a9a';
    stopButton.style.borderRadius = '4px';
    stopButton.style.cursor = 'pointer';
    stopButton.style.transition = 'all 0.2s';
  
    stopButton.onmouseover = () => {
      stopButton.style.background = '#ffcdd2';
    };
    stopButton.onmouseout = () => {
      stopButton.style.background = '#ffebee';
    };
  
    stopButton.onclick = () => {
      isCancelled = true;
      abortController.abort('User requested cancellation');
      loadingMessage.textContent = '⏹️ Stopping generation...';
      stopButton.disabled = true;
      stopButton.style.cursor = 'not-allowed';
      stopButton.style.opacity = '0.7';
      
      setTimeout(() => {
        if (loadingContainer.parentNode) {
          loadingContainer.style.display = 'none';
        }
        buttons.forEach(btn => {
          btn.style.display = '';
        });
      }, 1000);
    };
  
    loadingContainer.appendChild(loadingMessage);
    loadingContainer.appendChild(stopButton);
  
    buttons.forEach(btn => {
      btn.style.display = 'none';
    });
  
    container.insertBefore(loadingContainer, container.firstChild);
    
    return { 
      loadingContainer, 
      loadingMessage, 
      stopButton, 
      abortController, 
      isCancelled: () => isCancelled 
    };
  }

  // Enhanced function to check connection status
  function checkConnectionStatus() {
    // Check if already connected (Message button exists)
    const messageButton = document.querySelector('button[aria-label*="Message"]');
    if (messageButton) {
      return 'connected';
    }
    
    // Check if request is pending (Pending button exists)
    const pendingButton = document.querySelector('button[aria-label*="Pending"]');
    if (pendingButton) {
      return 'pending';
    }
    
    // Check if there's an incoming request to accept (Accept button exists)
    const acceptButton = document.querySelector('button[aria-label*="Accept"]');
    if (acceptButton) {
      return 'accept';
    }
    
    // Check if not connected (Connect button exists)
    const connectButton = document.querySelector('button[aria-label*="Connect"]');
    if (connectButton) {
      return 'not-connected';
    }
    
    // Default case
    return 'unknown';
  }

  // Function to show connection status message and appropriate buttons
  function showConnectionStatus(container, status) {
    // Remove any existing status message
    const existingStatus = container.querySelector('.connection-status-message');
    if (existingStatus) {
      existingStatus.remove();
    }
    
    // Create new status message element
    const statusMessage = document.createElement('div');
    statusMessage.className = `connection-status-message connection-status-${status.toLowerCase().replace(' ', '-')}`;
    
    // Set message based on status
    switch(status) {
      case 'connected':
        statusMessage.textContent = '✅ You are connected with this person and can message them.';
        break;
      case 'pending':
        statusMessage.textContent = '⏳ Your connection request is pending. You can message after they accept.';
        break;
      case 'accept':
        statusMessage.textContent = '✉️ You have a connection request from this person. Accept it to message them.';
        break;
      case 'not-connected':
        statusMessage.textContent = '🔗 You need to connect with this person before you can message them.';
        break;
      default:
        statusMessage.textContent = '❓ Unable to determine connection status.';
    }
    
    // Insert the status message at the top of the container
    container.insertBefore(statusMessage, container.firstChild);
    
    return status;
  }
  
  // Function to create AgentLink Connect button
  function createAgentLinkConnectButton() {
    const agentLinkButton = document.createElement('button');
    agentLinkButton.className = 'comment-btn agentlink-btn';
    agentLinkButton.textContent = 'Connect via AgentLink';
    
    agentLinkButton.addEventListener('click', () => {
      const connectButton = document.querySelector('button[aria-label*="Connect"]');
      if (connectButton) {
        connectButton.click();
        
        // After clicking connect, show a brief message
        setTimeout(() => {
          const buttonContainer = document.getElementById('linkedin-quick-reply-buttons');
          if (buttonContainer) {
            const statusMessage = buttonContainer.querySelector('.connection-status-message');
            if (statusMessage) {
              statusMessage.textContent = '✉️ Connection request sent! You can message after they accept.';
              statusMessage.className = 'connection-status-message connection-status-pending';
            }
            
            // Remove the connect button since we've already sent the request
            const connectBtn = buttonContainer.querySelector('.agentlink-btn');
            if (connectBtn) {
              connectBtn.remove();
            }
          }
        }, 1000);
      }
    });
    
    return agentLinkButton;
  }

  // Function to create Accept Request button
  function createAcceptRequestButton() {
    const acceptRequestButton = document.createElement('button');
    acceptRequestButton.className = 'comment-btn agentlink-btn';
    acceptRequestButton.textContent = 'Accept Request';
    
    acceptRequestButton.addEventListener('click', () => {
      const acceptButton = document.querySelector('button[aria-label*="Accept"]');
      if (acceptButton) {
        acceptButton.click();
        
        // After accepting, show message buttons immediately
        setTimeout(() => {
          const buttonContainer = document.getElementById('linkedin-quick-reply-buttons');
          if (buttonContainer) {
            buttonContainer.innerHTML = '';
            initializeQuickReplyButton();
          }
        }, 2000);
      }
    });
    
    return acceptRequestButton;
  }

  // Main initialization function
  (async function() {
    // Only run on LinkedIn profile pages
    if (!window.location.href.includes('linkedin.com/in/')) {
      return;
    }
  
    console.log('AgentLink: Ready to message profiles', 0);
  
    // Add the new styles
    addStyles();
  
    let isInitialized = false;
    let lastUrl = window.location.href;
  
    // Caching function
    async function getProfileDataWithCache() {
      console.log('AgentLink: Checking profile data cache', 0);
      const currentUrl = window.location.href.split('?')[0];
      const cacheKey = `profileData_${currentUrl}`;
      
      const { [cacheKey]: cachedData } = await chrome.storage.local.get(cacheKey);
      
      if (cachedData) {
        console.log("AgentLink: Using cached profile data", 0);
        return cachedData;
      }
      
      console.log("AgentLink: Gathering fresh profile data", 2);
      const profileData = await gatherCompleteProfileData();
      
      const dataToCache = {
        ...profileData,
        _cachedAt: Date.now()
      };
      
      await chrome.storage.local.set({ [cacheKey]: dataToCache });
      
      setTimeout(async () => {
        await chrome.storage.local.remove(cacheKey);
      }, 24 * 60 * 60 * 1000);
      
      return profileData;
    }
  
    async function initializeQuickReplyButton() {
      if (isInitialized) return;
      console.log('AgentLink: Initializing quick reply buttons', 1);
      
      // Wait for page to settle
      await new Promise(resolve => setTimeout(resolve, 4000));

      // Check if button already exists
      if (document.getElementById('linkedin-quick-reply-buttons')) {
        return;
      }

      const { buttonConfigs = [] } = await chrome.storage.local.get(['buttonConfigs']);
      if (!buttonConfigs.length) {
        console.log('AgentLink: No button configs found', 0);
        return;
      }

      // Create container for buttons
      const buttonContainer = document.createElement('div');
      buttonContainer.id = 'linkedin-quick-reply-buttons';
      buttonContainer.className = 'dynamic-comment-buttons';

      // Multiple possible locations to insert the buttons
      const insertionPoints = [
        '.pv-top-card-v2-ctas__custom',
        '.YVhLlvSJKxRQbVgJhjXUSVtLCKzCemxlsHsfhw',
        '.pvs-profile-actions',
        '.ph5.pb5',
        '.scaffold-layout__main'
      ];

      // Try each insertion point until successful
      let inserted = false;
      for (const selector of insertionPoints) {
        const targetElement = document.querySelector(selector);
        if (targetElement) {
          targetElement.parentNode.insertBefore(buttonContainer, targetElement.nextSibling);
          inserted = true;
          break;
        }
      }

      if (!inserted) {
        console.log('AgentLink: Could not find insertion point', 0);
        return;
      }

      // Check connection status
      const connectionStatus = checkConnectionStatus();
      
      // Show appropriate status message
      showConnectionStatus(buttonContainer, connectionStatus);
      
      // Handle different connection states
      switch(connectionStatus) {
        case 'not-connected':
          // Add Connect button
          buttonContainer.appendChild(createAgentLinkConnectButton());
          break;
          
        case 'accept':
          // Add Accept Request button
          buttonContainer.appendChild(createAcceptRequestButton());
          break;
          
        case 'connected':
          // Create buttons from config for connected users
          buttonConfigs.forEach(config => {
            const button = document.createElement('button');
            button.className = 'comment-btn';
            button.textContent = config.name || config.label || 'Template';
            button.setAttribute('data-original-text', config.name);

            button.addEventListener('click', async () => {
              if (button.disabled) return;
              
              button.disabled = true;
              
              try {
                console.log(`AgentLink: Starting ${config.name} message`, 0);
                const profileData = await getProfileDataWithCache();
                const aiSettings = await getAISettings();
                
                const buttons = Array.from(buttonContainer.querySelectorAll('.comment-btn'));
                const { 
                  loadingContainer, 
                  loadingMessage, 
                  stopButton, 
                  abortController, 
                  isCancelled 
                } = createLoadingIndicator(buttons, buttonContainer);
                
                try {
                  console.log('AgentLink: Generating AI message', 2);
                  const response = await chrome.runtime.sendMessage({
                    action: "generateMessage",
                    profileData,
                    config,
                    aiSettings,
                    signal: abortController.signal
                  }).catch(err => {
                    if (err.message.includes('aborted') || err.message.includes('cancelled')) {
                      throw new Error('Generation cancelled by user');
                    }
                    throw err;
                  });
                  
                  if (isCancelled()) {
                    loadingMessage.textContent = '❌ Generation cancelled';
                    throw new Error('Generation cancelled by user');
                  }
                  
                  console.log('AgentLink: Opening message window', 1);
                  const messageWindowOpened = await clickMessageButton();
                  
                  if (isCancelled()) {
                    loadingMessage.textContent = '❌ Generation cancelled';
                    throw new Error('Generation cancelled by user');
                  }

                  if (!messageWindowOpened) {
                    throw new Error('Failed to open message window');
                  }

                  await new Promise(resolve => setTimeout(resolve, 3000));

                  if (isCancelled()) {
                    loadingMessage.textContent = '❌ Generation cancelled';
                    throw new Error('Generation cancelled by user');
                  }

                  console.log('AgentLink: Inserting message', 2);
                  await insertMessage(response.message, profileData);

                  loadingMessage.textContent = '✅ Message ready to send!';
                  stopButton.style.display = 'none';
                } catch (error) {
                  if (error.message.includes('cancelled') || error.message.includes('aborted')) {
                    loadingMessage.textContent = '❌ Generation cancelled';
                    console.log('AgentLink: Message generation cancelled', 0);
                  } else {
                    console.error(error);
                    loadingMessage.textContent = `❌ Error: ${error.message}`;
                    console.log(`AgentLink: Error: ${error.message}`, 0);
                  }
                } finally {
                  setTimeout(() => {
                    if (loadingContainer.parentNode) {
                      loadingContainer.style.display = 'none';
                    }
                    buttons.forEach(btn => {
                      btn.style.display = '';
                    });
                  }, 2000);
                }
                
                console.log('AgentLink: Message ready to send!', 1);
              } catch (error) {
                console.error(error);
                console.log(`AgentLink: Error: ${error.message}`, 0);
              } finally {
                button.disabled = false;
              }
            });

            buttonContainer.appendChild(button);
          });
          break;
          
        case 'pending':
          // No additional buttons for pending state
          break;
          
        default:
          // Unknown state - no buttons
          break;
      }

      // Add AgentLink branding
      buttonContainer.appendChild(createAgentLinkBranding());

      // Add mutation observer to handle dynamic page changes
      const observer = new MutationObserver((mutations) => {
        if (!document.getElementById('linkedin-quick-reply-buttons')) {
          initializeQuickReplyButton();
        }
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true
      });

      isInitialized = true;
      console.log('AgentLink: Quick reply buttons initialized', 0);
    }

    // Enhanced SPA navigation detection
    function setupSPANavigationObserver() {
      const domObserver = new MutationObserver(function() {
        if (window.location.href.includes('linkedin.com/in/') && window.location.href !== lastUrl) {
          lastUrl = window.location.href;
          isInitialized = false;
          initializeQuickReplyButton();
        }
      });

      const urlObserver = new MutationObserver(function() {
        if (window.location.href !== lastUrl && window.location.href.includes('linkedin.com/in/')) {
          lastUrl = window.location.href;
          isInitialized = false;
          initializeQuickReplyButton();
        }
      });

      domObserver.observe(document.body, {
        childList: true,
        subtree: true
      });

      const titleElement = document.querySelector('title');
      if (titleElement) {
        urlObserver.observe(titleElement, {
          childList: true
        });
      }

      const pushState = history.pushState;
      const replaceState = history.replaceState;

      history.pushState = function() {
        pushState.apply(history, arguments);
        if (window.location.href.includes('linkedin.com/in/') && window.location.href !== lastUrl) {
          lastUrl = window.location.href;
          isInitialized = false;
          initializeQuickReplyButton();
        }
      };

      history.replaceState = function() {
        replaceState.apply(history, arguments);
        if (window.location.href.includes('linkedin.com/in/') && window.location.href !== lastUrl) {
          lastUrl = window.location.href;
          isInitialized = false;
          initializeQuickReplyButton();
        }
      };

      window.addEventListener('beforeunload', () => {
        domObserver.disconnect();
        urlObserver.disconnect();
      });
    }

    // Initial setup
    initializeQuickReplyButton();
    setupSPANavigationObserver();

    // Fallback check after 3 seconds
    setTimeout(() => {
      if (!isInitialized) {
        console.log('AgentLink: Running fallback initialization', 0);
        initializeQuickReplyButton();
      }
    }, 3000);

    // Additional fallback - check every 2 seconds for SPA navigation
    setInterval(() => {
      if (window.location.href.includes('linkedin.com/in/') && window.location.href !== lastUrl) {
        console.log('AgentLink: Detected profile page change', 0);
        lastUrl = window.location.href;
        isInitialized = false;
        initializeQuickReplyButton();
      }
    }, 2000);
  })();
  
  // Generic function to fetch text content from a specified selector
  function fetchTextContent(selector, defaultValue = "Not found") {
    return document.querySelector(selector)?.innerText.trim() || defaultValue;
  }
  
  // Function to fetch the name from the first <h1> tag
  function fetchName() {
    return { name: fetchTextContent('h1', "Name not found") };
  }
  
  // Function to fetch the designation from the specified <div> element
  function fetchDesignation() {
    return { designation: fetchTextContent('div.text-body-medium', "Designation not found") };
  }
  
  // Function to fetch the profile location from the specified <span> element
  function fetchLocation() {
    return { profileLocation: fetchTextContent('span.text-body-small.inline', "Location not found") };
  }
  
  // Function to fetch connection details
  function fetchConnections() {
    const smallConnections = fetchTextContent('li.text-body-small a span.t-bold', null);
    const largeConnections = fetchTextContent('span.t-black--light span.t-bold', null);
    return { connections: smallConnections || largeConnections || "Connections not found" };
  }
  
  // Function to get followers data as an object
  function getFollowersData() {
    return { followers: fetchTextContent('li.text-body-small.t-black--light span.t-bold', "Followers not found") };
  }
  
  // Async function to fetch mutual connections
  async function getMutualConnections() {
    const mutualElement = document.querySelector('.align-items-center.link-without-hover-visited');
    if (mutualElement && mutualElement.getAttribute('aria-hidden') !== 'true' &&
      !mutualElement.classList.contains('visually-hidden') &&
      !mutualElement.classList.contains('**web-inspector-hide-shortcut**')) {
      return mutualElement.textContent.trim().split('mutual connection')[0] + ' mutual connection';
    }
    return 'No mutual connections found';
  }
  
  // Function to recursively gather text content from an element
  function getTextContent(element) {
    let text = '';
  
    element.childNodes.forEach(node => {
      if (node.nodeType === Node.TEXT_NODE) {
        text += node.textContent.trim() + ' ';
      } else if (node.nodeType === Node.ELEMENT_NODE && !node.classList.contains('visually-hidden')) {
        text += getTextContent(node);
      }
    });
  
    return text;
  }
  
  // Promise-based function to scrape all visible text content from a specified section
  function scrapeAllTextContent(sectionSelector) {
    return new Promise((resolve, reject) => {
      const section = document.querySelector(sectionSelector);
      if (!section) {
        reject(new Error("Section not found: " + sectionSelector));
        return;
      }
  
      let textContent = getTextContent(section);
      textContent = textContent.replace(/\s+/g, ' ').trim();
      textContent = textContent.replace(/([.?!])\s*(?=[A-Z])/g, '$1\n\n');
  
      resolve(textContent);
    });
  }
  
  // --- AI settings retrieval ---
  async function getAISettings() {
    const { aiSettings = {} } = await chrome.storage.local.get(['aiSettings']);
    return aiSettings;
  }
  
  // Function to extract experience data
  function extractExperienceData() {
    const experienceData = { experience: [] };
    const experienceHeading = [...document.querySelectorAll('h2')].find(h =>
      h.textContent.trim().includes('Experience')
    );
  
    if (experienceHeading) {
      const experienceSection = experienceHeading.closest('section');
      if (experienceSection) {
        const experienceItems = experienceSection.querySelectorAll('li.artdeco-list__item');
  
        experienceItems.forEach(item => {
          let texts = [];
          const allTextElements = item.querySelectorAll('.t-bold, .t-14.t-normal, .t-black--light, strong');
  
          allTextElements.forEach(element => {
            let text = element.textContent
              .replace(/<!---->/g, '')
              .replace(/\s+/g, ' ')
              .trim();
  
            if (text.length > 1) {
              const halfLength = Math.floor(text.length / 2);
              if (text.substring(0, halfLength) === text.substring(halfLength)) {
                text = text.substring(0, halfLength);
              }
            }
  
            if (text && !texts.includes(text)) {
              texts.push(text);
            }
          });
  
          texts = [...new Set(texts)].filter(text => text && text !== 'Experience');
          if (texts.length > 0) experienceData.experience.push({ texts });
        });
      }
    }
  
    return experienceData;
  }
  
  async function extractLinkedInExperience() {
    const showAllButtons = [
      document.querySelector('#navigation-index-see-all-positions-aggregated'),
      document.querySelector('#navigation-index-see-all-experiences')
    ].filter(button => button !== null);
  
    if (showAllButtons.length > 0) {
      for (let button of showAllButtons) {
        button.click();
        console.log("Clicked 'Show all experiences' button.");
      }
  
      await new Promise(resolve => setTimeout(resolve, 4000));
  
      const sectionSelector = 'section.artdeco-card.pb3';
      const experienceSection = document.querySelector(sectionSelector);
  
      if (experienceSection) {
        return new Promise(resolve => {
          const observer = new MutationObserver((mutations, obs) => {
            if (experienceSection.innerText.trim().length > 100) {
              obs.disconnect();
              scrapeAllTextContent(sectionSelector).then(scrapedText => {
                console.log("Scraped Text Content:\n", scrapedText);
                resolve(scrapedText);
              }).catch(error => {
                console.error("Error:", error.message);
                resolve();
              });
            }
          });
  
          observer.observe(experienceSection, { childList: true, subtree: true });
  
          setTimeout(() => {
            observer.disconnect();
            scrapeAllTextContent(sectionSelector).then(scrapedText => {
              console.log("Scraped Text Content:\n", scrapedText);
              resolve(scrapedText);
            }).catch(error => {
              console.error("Error:", error.message);
              resolve();
            });
          }, 6000);
        });
      }
    } else {
      return extractExperienceData();
    }
  }
  
  async function GetAbout() {
    let aboutSection = document.querySelector('#about');
    if (aboutSection) {
      let section = aboutSection.closest('section');
      let contentDiv = section.querySelector('div.display-flex.ph5.pv3');
  
      if (contentDiv) {
        let aboutText = Array.from(contentDiv.querySelectorAll('span:not(.visually-hidden)'))
          .map(span => span.innerText.trim())
          .join(' ');
        
        console.log(aboutText);
        return aboutText;
      } else {
        console.log("About content not found.");
        return "";
      }
    } else {
      console.log("About section anchor not found.");
      return "";
    }
  }
  
  async function extractBasicProfileInfo() {
    const nameSelector = 'h1';
    const designationSelector = '.text-body-medium.break-words';
    const locationSelector = 'span.text-body-small.inline.t-black--light.break-words';
    const connectionsSelector = 'li.text-body-small:last-child .t-bold';
    const followersSelector = 'ul li.text-body-small .t-bold';
  
    let obj = {
      name: document.querySelector(nameSelector)?.innerText.trim() || 'Name not found',
      designation: document.querySelector(designationSelector)?.innerText.trim() || 'Designation not found',
      location: document.querySelector(locationSelector)?.innerText.trim() || 'Location not found',
      connections: document.querySelector(connectionsSelector)?.innerText.trim() || 'Connections not found',
      followers: document.querySelector(followersSelector)?.textContent.trim() || 'followers not found',
      about: await GetAbout()
    };
    console.log(obj)
    return obj;
  }
  
  async function extractCurrentRole() {
    const currentPosition = document.querySelector('.pv-text-details__right-panel .pv-text-details__right-panel-item');
    return currentPosition?.innerText?.trim() || '';
  }
  
  async function gatherCompleteProfileData() {
    updateStatusDetailed('🔍 Analyzing profile data...');
  
    try {
      const [basicInfo] = await Promise.all([
        extractBasicProfileInfo(),
      ]);
  
      const profileData = {
        ...basicInfo
      };
  
      Object.entries(profileData).forEach(([key, value]) => {
        updateStatusDetailed(`${key}: ${value}`);
      });
  
      updateStatusDetailed('✅ Profile analysis complete!');
      return profileData;
    } catch (error) {
      console.error("Error extracting profile data:", error);
      updateStatusDetailed('❌ Error analyzing profile: ' + error.message, 'error');
      throw error;
    }
  }
  
  let statusMessages = [];
  let isPopupVisible = false;
  
  // Create enhanced status popup
  function createStatusPopup() {
    const popup = document.createElement('div');
    popup.id = 'ai-status-popup';
    popup.style.cssText = `       
      position: fixed;
      top: 100px;
      left: 100px;
      color: #e0e0ff;
      background: #1a1a2e;
      padding: 0;
      border-radius: 8px;
      box-shadow: 0 4px 20px rgba(110, 46, 220, 0.3);
      z-index: 9999;
      font-family: 'Segoe UI', Roboto, sans-serif;
      width: 450px;
      max-height: 600px;
      display: none;
      flex-direction: column;
      border: 1px solid #6e2edc;
      overflow: hidden;
      cursor: move;
    `;
  
    const header = document.createElement('div');
    header.style.cssText = `
      background: linear-gradient(90deg, #0033cc, #6e2edc);
      color: white;
      padding: 12px 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-weight: bold;
      font-size: 16px;
      user-select: none;
      border-bottom: 1px solid #6e2edc;
    `;
    header.innerHTML = `
      <span>AI MESSAGE GENERATOR</span>
      <div>
        <button id="clear-status" style="
          background: white;
          color: #0033cc;
          border: none;
          padding: 3px 8px;
          margin-right: 8px;
          border-radius: 4px;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.2s ease;
        ">CLEAR</button>
        <button id="toggle-status" style="
          background: white;
          color: #0033cc;
          border: none;
          padding: 3px 8px;
          border-radius: 4px;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.2s ease;
        ">SHOW</button>
      </div>
    `;
  
    const content = document.createElement('div');
    content.id = 'status-messages';
    content.style.cssText = `
      padding: 15px;
      overflow-y: auto;
      flex-grow: 1;
      background: #1a1a2e;
      display: none;
    `;
  
    popup.appendChild(header);
    popup.appendChild(content);
    document.body.appendChild(popup);
  
    const buttons = header.querySelectorAll('button');
    buttons.forEach(button => {
      button.addEventListener('mouseover', () => {
        button.style.background = '#e6e6ff';
        button.style.transform = 'scale(1.05)';
      });
      button.addEventListener('mouseout', () => {
        button.style.background = 'white';
        button.style.transform = 'scale(1)';
      });
    });
  
    let isDragging = false;
    let offsetX, offsetY;
  
    header.addEventListener('mousedown', (e) => {
      if (e.target.tagName === 'BUTTON') return;
      
      isDragging = true;
      offsetX = e.clientX - popup.getBoundingClientRect().left;
      offsetY = e.clientY - popup.getBoundingClientRect().top;
      popup.style.cursor = 'grabbing';
    });
  
    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      
      popup.style.left = (e.clientX - offsetX) + 'px';
      popup.style.top = (e.clientY - offsetY) + 'px';
    });
  
    document.addEventListener('mouseup', () => {
      isDragging = false;
      popup.style.cursor = 'move';
    });
  
    document.getElementById('clear-status').addEventListener('click', () => {
      statusMessages = [];
      updateStatusDisplay();
    });
  
    document.getElementById('toggle-status').addEventListener('click', () => {
      isPopupVisible = !isPopupVisible;
      popup.style.display = isPopupVisible ? 'flex' : 'none';
      content.style.display = isPopupVisible ? 'block' : 'none';
      document.getElementById('toggle-status').textContent = isPopupVisible ? 'HIDE' : 'SHOW';
    });
  
    return popup;
  }
  
  // Update status display
  function updateStatusDisplay() {
    const popup = document.getElementById('ai-status-popup') || createStatusPopup();
    const content = document.getElementById('status-messages');
  
    const messagesHtml = statusMessages.map(status => `
      <div style="
        margin-bottom: 15px;
        padding-bottom: 15px;
        border-bottom: 1px solid #2a2a3a;
        ${status.type === 'error' ? 'border-left: 3px solid #ff4d4d; padding-left: 10px;' : ''}
        ${status.type === 'success' ? 'border-left: 3px solid #4dff4d; padding-left: 10px;' : ''}
        ${status.type === 'info' ? 'border-left: 3px solid #4d4dff; padding-left: 10px;' : ''}
        ${status.type === 'ai-message' ? 'border-left: 3px solid #6e2edc; padding-left: 10px;' : ''}
      ">
        <div style="
          font-size: 12px;
          color: ${status.type === 'error' ? '#ff8080' : 
                  status.type === 'success' ? '#80ff80' : 
                  status.type === 'ai-message' ? '#b388ff' : '#9e9eff'};
          margin-bottom: 5px;
          font-weight: bold;
        ">${status.time} • ${status.type.toUpperCase()}</div>
        <div style="
          font-size: 14px;
          line-height: 1.5;
          color: ${status.type === 'error' ? '#ffb3b3' : '#e0e0ff'};
          font-weight: ${status.type === 'error' ? 'bold' : 'normal'};
          white-space: pre-wrap;
        ">${status.message}</div>
      </div>
    `).join('');
  
    content.innerHTML = messagesHtml;
    content.scrollTop = content.scrollHeight;
  }
  
  // Update status message
  function updateStatusDetailed(message, type = 'info') {
    console.log(`[${type}] ${message}`);
  
    statusMessages.push({
      message,
      type,
      time: new Date().toLocaleTimeString()
    });
  
    updateStatusDisplay();
  
    // Don't automatically show popup for new messages
    // Keep it hidden unless user chooses to show it
  }
  
  // Click Message Button
  async function clickMessageButton() {
    updateStatusDetailed('🔍 Looking for message button...');
  
    const messageButton = document.querySelector('button[aria-label*="Message"]');
    if (!messageButton) {
      updateStatusDetailed('❌ Message button not found!', 'error');
      throw new Error("Message button not found");
    }
  
    messageButton.click();
    updateStatusDetailed('✅ Message dialog opened');
    return true;
  }
  
  async function insertMessage(message, profileData) {
    updateStatusDetailed('⌨️ Inserting message...');
  
    return new Promise((resolve, reject) => {
      let chatWindows = document.querySelectorAll('.msg-overlay-conversation-bubble');
      if (chatWindows.length > 0) {
        processChatWindow(chatWindows[chatWindows.length - 1]);
        return;
      }
  
      const observer = new MutationObserver(() => {
        chatWindows = document.querySelectorAll('.msg-overlay-conversation-bubble');
        if (chatWindows.length === 0) return;
  
        observer.disconnect();
        processChatWindow(chatWindows[chatWindows.length - 1]);
      });
  
      observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: true,
        characterData: true
      });
  
      setTimeout(() => {
        observer.disconnect();
        updateStatusDetailed('❌ Timeout reached. No chat window found!', 'error');
        reject(new Error('Chat window not found'));
      }, 5000);
  
      async function processChatWindow(lastChatWindow) {
        console.log('Target chat window:', lastChatWindow);
  
        const chatBoxNameElement = lastChatWindow.querySelector('a.profile-card-one-to-one__profile-link .truncate');
        const chatBoxName = chatBoxNameElement ? chatBoxNameElement.innerText.trim() : '';
  
        const extractedProfileName = typeof profileData.name === 'object'
          ? JSON.stringify(profileData.name)
          : String(profileData.name).trim();
  
        console.log('Extracted Profile Name:', extractedProfileName);
        console.log('Chat Box Name:', chatBoxName);
        if (extractedProfileName && chatBoxName && extractedProfileName !== chatBoxName) {
          console.error(`❌ Profile name (${extractedProfileName}) does not match chat box name (${chatBoxName})`);
          updateStatusDetailed('❌ Profile name does not match chat box name!', 'error');
          reject(new Error('Profile name mismatch'));
          return;
        }
              const messageBox = lastChatWindow.querySelector('.msg-form__contenteditable');
              if (messageBox) {
                  messageBox.focus();
                  messageBox.click();
  // Clear the chatbox content first
                  messageBox.innerHTML = '';
                  messageBox.dispatchEvent(new Event("input", { bubbles: true }));
  
  
                  // ✅ Preserve paragraph formatting
                  const paragraphs = message
                      .split("\n")
                      .map(para => para.trim())
                      .filter(para => para.length > 0)
                      .map(para => `<p>${para}</p>`)
                      .join(""); 
  
                  document.execCommand("insertText", false, message); // ✅ Simulate text input
                  messageBox.dispatchEvent(new Event("input", { bubbles: true }));
  
                  updateStatusDetailed('✅ Message inserted successfully!');
                  resolve(true);
              } else {
                  console.log('❌ Message box not found.');
                  reject(new Error('Message box not found'));
              }
          }
      });
    }
  })();
