üìÑ manifest.json
json
Copy
Edit
{
  "manifest_version": 3,
  "name": "LinkedIn Filter Automator",
  "version": "1.0",
  "description": "Automatically apply all LinkedIn content search filters.",
  "permissions": ["scripting", "activeTab"],
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "128": "icon.png"
    }
  },
  "icons": {
    "128": "icon.png"
  },
  "content_scripts": [
    {
      "matches": ["https://www.linkedin.com/search/results/content/*"],
      "js": ["content.js"]
    }
  ]
}
üìÑ popup.html
html
Copy
Edit
<!DOCTYPE html>
<html>
<head>
  <title>LinkedIn Filter Automator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 15px;
      width: 250px;
    }
    button {
      width: 100%;
      padding: 10px;
      background-color: #0077b5;
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 4px;
      font-size: 16px;
    }
    button:hover {
      background-color: #005f87;
    }
  </style>
</head>
<body>
  <button id="applyFilters">Apply LinkedIn Filters</button>
  <script src="popup.js"></script>
</body>
</html>
üìÑ popup.js
javascript
Copy
Edit
document.getElementById('applyFilters').addEventListener('click', async () => {
  let [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
  chrome.scripting.executeScript({
    target: { tabId: tab.id },
    files: ['content.js']
  });
});
üìÑ content.js
javascript
Copy
Edit
(async () => {
  const sleep = (ms) => new Promise((res) => setTimeout(res, ms));

  const filters = {
    sortBy: "Latest",
    datePosted: "Past week",
    contentType: "Images",
    postedBy: "People you follow",
    fromMembers: ["John Doe", "Jane Smith"],
    fromCompanies: ["TechCorp", "Innovate LLC"],
    mentioningMembers: ["Alice Johnson"],
    mentioningCompanies: ["Global Solutions"],
    authorIndustry: ["Information Technology"],
    authorCompany: ["NextGen Inc."],
    title: ["Software Engineer"],
    authorKeywords: "Full Stack Developer",
    language: ["English"],
    engagementType: ["Likes", "Comments"],
    location: ["San Francisco Bay Area"],
    connections: ["2nd degree connections"]
  };

  const clickFilterButton = async () => {
    const filterBtn = document.querySelector('button[aria-label*="Show all filters"]');
    if (filterBtn) {
      filterBtn.click();
      await sleep(2000);
    } else {
      console.warn("‚ùå 'Show all filters' button not found.");
    }
  };

  const applyCheckbox = async (group, option) => {
    const fieldset = [...document.querySelectorAll('fieldset')].find(f => f.innerText.includes(group));
    if (!fieldset) return console.warn(`‚ùå Fieldset not found: ${group}`);
    const label = [...fieldset.querySelectorAll('label')].find(l => l.innerText.includes(option));
    if (label) {
      label.click();
      console.log(`‚úÖ Selected "${option}" in "${group}"`);
      await sleep(1000);
    } else {
      console.warn(`‚ùå Option not found: "${option}" in "${group}"`);
    }
  };

  const applyTextInput = async (ariaLabel, value) => {
    const input = document.querySelector(`input[aria-label="${ariaLabel}"]`);
    if (input) {
      input.focus();
      input.value = '';
      input.dispatchEvent(new Event('input', { bubbles: true }));
      for (let i = 0; i <= value.length; i++) {
        input.value = value.substring(0, i);
        input.dispatchEvent(new Event('input', { bubbles: true }));
        await sleep(60);
      }
      await sleep(1000);
      const suggestion = document.querySelector('[role="listbox"] li, [role="option"], .basic-typeahead__option');
      if (suggestion) {
        suggestion.click();
        console.log(`‚úÖ Selected suggestion for "${value}"`);
        await sleep(1000);
      }
    } else {
      console.warn(`‚ùå Input not found for "${ariaLabel}"`);
    }
  };

  const applyTextList = async (ariaLabel, values, triggerText = null) => {
    if (triggerText) {
      const trigger = [...document.querySelectorAll('button')].find(b => b.innerText.trim() === triggerText);
      if (trigger) {
        trigger.click();
        await sleep(1000);
      }
    }
    for (const val of values) {
      await applyTextInput(ariaLabel, val);
    }
  };

  await clickFilterButton();
  await applyCheckbox("Sort by", filters.sortBy);
  await applyCheckbox("Date posted", filters.datePosted);
  await applyCheckbox("Content type", filters.contentType);
  await applyCheckbox("Posted by", filters.postedBy);

  await applyTextList("Add a person's name", filters.fromMembers, "Add a person's name");
  await applyTextList("Add a company's name", filters.fromCompanies, "Add a company's name");
  await applyTextList("Mention a person", filters.mentioningMembers, "Mention a person");
  await applyTextList("Mention a company", filters.mentioningCompanies, "Mention a company");
  await applyTextList("Add an industry", filters.authorIndustry, "Add an industry");
  await applyTextList("Add a company", filters.authorCompany, "Add a company");
  await applyTextList("Add a title", filters.title, "Add a title");
  await applyTextList("Add a language", filters.language, "Add a language");
  await applyTextList("Select engagement type", filters.engagementType);
  await applyTextList("Add a location", filters.location);
  await applyTextList("Select connections", filters.connections);

  const authorKeywordSection = [...document.querySelectorAll('li.search-reusables__secondary-filters-filter')].find(e => e.innerText.includes("Author Keywords"));
  if (authorKeywordSection) {
    const input = authorKeywordSection.querySelector('input[type="text"]');
    if (input) {
      input.focus();
      input.value = '';
      input.dispatchEvent(new Event('input', { bubbles: true }));
      for (let i = 0; i < filters.authorKeywords.length; i++) {
        input.value = filters.authorKeywords.substring(0, i + 1);
        input.dispatchEvent(new Event('input', { bubbles: true }));
        await sleep(80);
      }
      console.log(`‚úÖ Typed '${filters.authorKeywords}' into Author Keywords`);
    }
  }

  const showResults = [...document.querySelectorAll('button')].find(b => /show results/i.test(b.innerText));
  if (showResults) {
    showResults.click();
    console.log("üöÄ Filters applied and results shown.");
  } else {
    console.warn("‚ùå 'Show results' button not found.");
  }
})();
